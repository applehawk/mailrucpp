/*
 * Object of the Bank, contain all accounts,
 * clients and transaction of this bank

class Bank {
public:
  Bank() {}
  ~Bank() {}

  Transaction* createTransaction(Account* aSource, Account* aDest,
      Decimal sum);

  Client* addNewClient(string firstName, string secondName,
      string dateOfBirth);

  Employee* addNewEmployee(string firstName, string secondName, int levelAccess);
private:
  vector<Transaction*> m_transactions;
  vector<Account*> m_accounts;
  vector<Client*> m_clients;
  vector<Employee*> m_employees;
};

/*
 * Determine of transaction between two account in the bank

class Transaction {
public:
  Transaction() {}
  ~Transaction() {}
private:
  Date m_dateOfOperation; 
  BankingAccount* m_sourceAccount;
  BankingAccount* m_destAccount;
}
/*
 * Base class of all bank accounts

class Account {
public:
  Account() {}
  ~Account() {}

  void debet(Decimal sum) {}
  void drawal(Decimal sum) {}
private:
  Bank* m_bankAccount;
};
/*
 * Especiall for checking accounts

class CheckingAccount : public Account {
public:
  CheckingAccount() {}
  ~CheckingAccount() {}
};
/*
 * Especiall for savings accounts

class SavingsAccount : public Account {
public:
  SavingsAccount() {}
  ~SavingsAccount() {}
};

class Person {
public:
  Person(const string& aFirstName, const string& aSecondName, int aDateBirth)
  {
    m_firstName = aFirstName;
    m_secondName = aSecondName;
    m_dateOfBirth = aDateBirth;
  }

  virtual ~Person() {}
  const string& firstName() { return m_firstName; }
  const string& secondName() { return m_secondName; }
  int dateOfBirth() { return m_dateOfBirth; }
private:
  string m_firstName;
  string m_secondName;
  int m_dateOfBirth;
};

class Client : public Person
{
public:
  Client(const string& aFirstName, const string& aSecondName, int aDateBirth    ) : Person(aFirstName, aSecondName, aDateBirth) {}Â¬
private:
  /*
   * All accounts of this client

  
  vector<Account*> m_accounts; 
  Bank* m_bank;
};

class Employee : public Client
{
public:
  Employee() {}
  ~Employee() {}
  
  int levelAccess() { return m_levelAccess; }
private:
  int m_levelAccess;
};

*/
